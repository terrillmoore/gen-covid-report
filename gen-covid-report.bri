/*

Module:  gen-covid-report.bri

Function:
	Set up a COVID-19 report

Copyright notice:
	See accompanying license file.

Author:
	Terry Moore, MCCI Corporation	August 2016

Running:
    MCCIBRIGHT_LIB=c:/tools/lib/bright bright gen-covid-report.bri ../COVID-19

*/

/*
|| The version number
*/
if (!(.VERSION in globals()))
	VERSION = "v0.1.0";
if (!(.COPYRIGHT in globals()))
	COPYRIGHT = "Copyright (C) 2020, MCCI Corporation";

/*
|| Load MCCI Bright Library -- This can come from environment MCCIBRIGHT_LIB
|| (conforming to the Windows MCCIConf naming conventions).
||
|| Also compatible with the library existing in the current directory or
|| already loaded.
*/
if(!(.Lib in globals()))
	{
	local BRIGHTLIB = getenv("MCCIBRIGHT_LIB");
	local MCCIBRIGHTLIB_root = (BRIGHTLIB == NULL ? "" : BRIGHTLIB .. "/") .. "mcci_v1.br"
	// try compiled form
	local tLib, sError = dofile(MCCIBRIGHTLIB_root .. "o");
	if (sError != NULL)
		{
		tLib, sError = dofile(MCCIBRIGHTLIB_root.."i");
		if (sError != NULL)
	    		{
	    		assert(FALSE,
				"mcci_v1.bri not found/readable: " .. sError .. ". "..
				" Set MCCIBRIGHT_LIB to the directory."
				);
			}
	    	}
	assert(Lib != NULL, "mcci_v1.bri load failed!")
	}

{
local kBreak = Lib.ParsedDateToPosix(Lib.ParseDateString("2020-03-10"));
gvDates = {};

function SanitizeUS(tData, sProvince, posixDate)
    {
    if (posixDate < %kBreak)
        return TRUE;
    if (sProvince in tData.tProvinceMap)
        return TRUE;
    else
        return FALSE;
    }
}

gData =
    {
    US = { name="US", pop = 330e6, hospital_beds_per_k = 2.9, tProvinceMap = {}, /* Sanitize = SanitizeUS, */ },
    KR = { name="Korea, South", pop = 51e6, hospital_beds_per_k = 11.5,  },
    CN = { name="China", pop = 1.1e9, },
    IT = { name="Italy", pop = 62e6, },
    NO = { name="Norway", pop = 5.2e6, },
    ES = { name="Spain", pop = 46.42e6, },
    FR = { name="France", pop = 66.9e6, },
    DE = { name="Germany", pop = 82.93e6, },
    IN = { name="India", pop = 1.35e9 },
    JP = { name="Japan", pop = 126.79e6 },
    EC = { name="Ecuador", pop = 17.08e6 },
    CA = { name="Canada", pop = 3779749 },
    TW = { name="Taiwan*", pop = 23.59e6, reportName="Taiwan" },
    };

{
    local USstates =
        {
        "Alabama",
        "Alaska",
        "Arizona",
        "Arkansas",
        "California",
        "Colorado",
        "Columbia",
        "Connecticut",
        "Delaware",
        "Florida",
        "Georgia",
        "Guam",
        "Hawaii",
        "Idaho",
        "Illinois",
        "Indiana",
        "Iowa",
        "Kansas",
        "Kentucky",
        "Louisiana",
        "Maine",
        "Maryland",
        "Massachusetts ",
        "Michigan",
        "Minnesota",
        "Mississippi",
        "Missouri",
        "Montana",
        "Nebraska",
        "Nevada",
        "New Hampshire",
        "New Jersey",
        "New Mexico",
        "New York",
        "North Carolina",
        "North Dakota",
        "Northern Marianas Islands",
        "Ohio",
        "Oklahoma",
        "Oregon",
        "Pennsylvania",
        "Puerto Rico",
        "Rhode Island",
        "Samoa",
        "South Carolina",
        "South Dakota",
        "Tennessee",
        "Texas",
        "Utah",
        "Vermont",
        "Virgin Islands",
        "Virginia",
        "Washington",
        "West Virginia",
        "Wisconsin",
        "Wyoming",
        };
    local USStateMap = Lib.Transpose(USstates);
    gData.US.tProvinceMap = USStateMap
}

{
    gCountryMap = {};

    for k, v in gData do
        {
        gCountryMap[v.name] = k;
        }
}

/****************************************************************************\
|
|	main()
|
\****************************************************************************/

function loadfile(sPrefix, sFrag)
    {
    // open the file
    local f, e = openfile(format("%scsse_covid_19_data/csse_covid_19_time_series/time_series_covid19_%s_global.csv", sPrefix, sFrag), "r");

    if (f == NULL)
        %Lib.Fatal("Can't open file fragment %s", sFrag);

    local s, e1 = read(f, "*a");
    if (s == NULL)
        %Lib.Fatal("Can't read file fragment %s", sFrag);

    closefile(f);

    // normalize dates
    local s1 = gsub(s,
            "(%d+)/(%d+)/(%d%d)",
            function(m,d,y)
                {
                return format("20%02s-%02s-%02s", y, m, d);
                });

    // parse CSV, return headers as line 1
    local t = %Lib.ParseCsv(s1, {});
    return t;
    }


function main(tArgs)
    {
    local sPrefix = tArgs[1];
    local nLast = getn(tArgs) > 2 ? Lib.StringToNumber(tArgs[2]) : NULL;
    local tConfirmed = loadfile(sPrefix, "confirmed");
    local tDeaths = loadfile(sPrefix, "deaths");
    // local tRecovered = loadfile(sPrefix, "Recovered");
    // kluge until we switch to scanning the daily files
    gkDate = 4;
    local tRecovered = {};
    for i = 0, getn(tDeaths)-1 do
        {
        local trDeaths = tDeaths[i];
        local trRecovered = {};
        for j = 0, gkDate-1 do
            trRecovered[j] = trDeaths[j];
        for j = gkDate, getn(trDeaths)-1 do
            trRecovered[j] = 0;
        tRecovered[i] = trRecovered;
        }
    local tMerge = {};
    local sProvince = "Province/State"; local kProvince = 0;
    local sCountry = "Country/Region"; local kCountry = 1;
    local sLat = "Lat"; local kLat = 2;
    local sLong = "Long"; local kLong = 3;

    // build a date translation table
    gtHeader = tConfirmed[0];
    local tDates;
    local vDates = {}
    gvDates = vDates;

    for i = gkDate, getn(gtHeader)-1 do
        {
        tinsert(vDates, %Lib.ParsedDateToPosix(%Lib.ParseDateString(gtHeader[i])));
        }

    local initDataTable = function()
        {
        local tData = {}
        local tResult = { Total = { Data = tData } };
        for i = gkDate, getn(gtHeader) - 1 do
            {
            tData[i - gkDate] =
                {
                Confirmed = 0,
                Deaths = 0,
                Recovered = 0,
                };
            }
        return tResult;
        }

    tMerge.World = initDataTable();

    // merge 3 tables
    for iRow = 1, getn(tConfirmed) - 1 do
        {
        local trConfirmed = tConfirmed[iRow];
        local trDeaths = tDeaths[iRow];
        local trRecovered = tRecovered[iRow];
        local trMerge = {};
        local fSkip = FALSE;

        local sCountry = trConfirmed[kCountry];
        local sProvince = trConfirmed[kProvince];
        local tCountryData;

        if (sCountry in gCountryMap)
            {
            tCountryData = gData[gCountryMap[sCountry]];
            }
        else
            tCountryData = {};

        local tWorldData = tMerge.World.Total.Data;

        if (! fSkip)
            {
            if ( ! (sCountry in tMerge))
                {
                tMerge[sCountry] = initDataTable();
                }

            local tTotalData = tMerge[sCountry].Total.Data;

            tMerge[sCountry][sProvince] =
                    {
                    GPS = { Lat = %Lib.StringToNumber(trConfirmed[kLat]),
                            Long = %Lib.StringToNumber(trConfirmed[kLong]) },
                    Data = {}
                    };

            tMerge[sCountry][sProvince].Data = trMerge;

            for i = gkDate, getn(trConfirmed)-1 do
                {
                local posixDate = vDates[i - gkDate];

                local v = { Confirmed = %Lib.StringToNumber(trConfirmed[i]),
                            Deaths = %Lib.StringToNumber(trDeaths[i]),
                            Recovered = %Lib.StringToNumber(trRecovered[i])
                        };
                tinsert(trMerge, v);

                if (.Sanitize in tCountryData && ! tCountryData.Sanitize(tCountryData, sProvince, posixDate))
                    {
                    /* do nothing */;
                    // print("skip "..sProvince);
                    }
                else
                    {
                    addStats(tTotalData[i - gkDate], v);
                    addStats(tWorldData[i - gkDate], v);
                    }
                }
            }
        }

    writeHeader();

    local nKRhundred = getKRhundred(tMerge);
    local reportCasesForCountry = function(tCountryData) return reportCases(tCountryData, %tMerge, %vDates, %nLast, %nKRhundred);

    reportCasesForCountry(gData.KR);
    reportCasesForCountry(gData.US);
    reportCasesForCountry(gData.IT);
    reportCasesForCountry(gData.NO);
    reportCasesForCountry(gData.ES);
    reportCasesForCountry(gData.FR);
    reportCasesForCountry(gData.DE);
    reportCasesForCountry(gData.IN);
    reportCasesForCountry(gData.JP);
    reportCasesForCountry(gData.EC);
    reportCasesForCountry(gData.CA);
    reportCasesForCountry(gData.TW);

    // use the most recent korean total as the average rate
    local tKRlast = getKRlast(tMerge);
    local rateKR = tKRlast.Deaths / tKRlast.Confirmed;
    local tWorld = tMerge.World.Total.Data;
    local firstI = nLast == NULL || nLast == 0 ? 0 : getn(tWorld) - nLast;

    // print out general info
    write("\n");
    write("## World cases (outside China)\n")
    write("\n");
    write(format(
          "|  Date  |  Confirmed |  Deaths | Rate (%s) | KR Normalized | Doubling Days |\n", "%"));
    write("|:------:|:----------:|:-------:|:---------:|:-------------:|:-------------:|\n");
    local kLog2 = log(2);
    local doublingSum = 0;
    local doublingCount = 0;
    for i = firstI, getn(tWorld)-1 do
        {
        local tThis = tWorld[i];
        local sDate = date("%Y-%m-%d", "utc", vDates[i]);
        local nNew, nNewPrev = 0, 0;
        local tCn = tMerge[gData.CN.name].Total.Data;
        local tThisCn = tCn[i];
        local nConfirmed = tThis.Confirmed - tThisCn.Confirmed;
        local nDeaths = tThis.Deaths - tThisCn.Deaths;

        nNew = nConfirmed;
        if (i > 0)
            nNewPrev = (tWorld[i-1].Confirmed - tCn[i-1].Confirmed);

        if (nNewPrev > 0)
            nDoubling = kLog2 / log(nNew / nNewPrev);

        local nConfirmedAdjust = nDeaths / rateKR;

        write(format(
            "| %s | %s | %s | %.2f | %s | %.1f |\n",
            sDate,
            formatHeadcount(nConfirmed),
            formatHeadcount(nDeaths),
            nConfirmed != 0 ? nDeaths / nConfirmed * 100 : 0,
            formatHeadcount(nConfirmedAdjust),
            nDoubling
            ));

        doublingSum = doublingSum + nDoubling;
        if (nDoubling != 0)
            doublingCount = doublingCount + 1;
        }

    if (doublingCount != 0)
        {
        write("\n");
        write(format("Mean doubling days for last %d days: %.1f\n", doublingCount, doublingSum/doublingCount));
        }
    }

function addStats(t1, t2)
    {
    t1.Confirmed = t1.Confirmed + t2.Confirmed;
    t1.Deaths = t1.Deaths + t2.Deaths;
    t1.Recovered = t1.Recovered + t2.Recovered;
    return t1;
    }

function getKRlast(tMerge)
    {
    local iLast = getn(gtHeader)-gkDate-1;
    local tKRlast = tMerge[gData.KR.name].Total.Data[iLast];
    if (tKRlast.Deaths == 0)
        tKRlast = tMerge[gData.KR.name].Total.Data[iLast - 1];
    return tKRlast;
    }

function getKRhundred(tMerge)
    {
    local tKRdata = tMerge[gData.KR.name].Total.Data;
    return getHundred(tKRdata);
    }

function getHundred(tCountry)
    {
    local iHundred = getn(tCountry);

    for i = 0, getn(tCountry)-1 do
        {
        local tThis = tCountry[i];
        if (tThis.Confirmed >= 100 && iHundred > i)
            {
            iHundred = i;
            break;
            }
        }

    return iHundred;
    }

function formatPopPerCase(pop, nCases)
    {
    local n = NULL;
    if (pop != NULL && nCases != NULL && nCases != 0)
        n = pop / nCases;

    return formatHeadcount(n);
    }

function formatHeadcount(n)
    {
    local sResult = "-";
    if (n != NULL)
        {
        if (n < 1e6)
            {
            sResult = format("%d", n);
            if (strlen(sResult) > 3)
                sResult = strsub(sResult, 0, -4)..","..strsub(sResult, -3);
            }
        else if (n < 1e9)
            sResult = format("%.1fe6", n / 1e6);
        else
            sResult = format("%.1fe9", n / 1e9);
        }
    return sResult;
    }

function reportCases(tCountryData, tMerge, vDates, nLast, iKRhundred)
    {
    // tMerge[] has the data. Get the US total for today
    local iLast = getn(gtHeader)-gkDate-1;
    local tCountrylast = tMerge[tCountryData.name].Total.Data[iLast];
    local tKRlast = getKRlast(tMerge);
    local tWorld = tMerge.World.Total.Data
    local tWorldLast = tWorld[iLast];
    local kLog2 = log(2);
    local sCountryName;

    sCountryName = tCountryData.name;
    if (.reportName in tCountryData)
        sCountryName = tCountryData.reportName

    write(format("\n## %s Cases (Reported and Inferred)\n", sCountryName));
    write("\n");
    write(format("| Date | Dn  | Confirmed | Deaths | Pop/Confirmed | Doubling | Deaths (%s) | KR Deaths (%s) | Inferred Cases | Pop/Inferred |\n",
                "%", "%"));
    write(format("|:----:|:---:|:---------:|:------:|:-------------:|:--------:|:-----------:|:--------------:|:---------------:|:----------:|\n"));
    local tCountry = tMerge[tCountryData.name].Total.Data;
    local tKR = tMerge[gData.KR.name].Total.Data;
    local firstI = nLast == NULL || nLast == 0 ? 0 : getn(tCountry) - nLast;

    local iHundred = getHundred(tCountry);

    for i = firstI, getn(tCountry)-1 do
        {
        local tThis = tCountry[i];
        local tRateKR;
        if (i >= iHundred)
            {
            local iKR = iKRhundred + (i - iHundred);
            if (tKR[iKR].Confirmed == 0)
                tRateKR = 0;
            else
                tRateKR = tKR[iKR].Deaths / tKR[iKR].Confirmed;
            }
        else
            tRateKR = 0;

        local sDate = date("%Y-%m-%d", "utc", vDates[i]);
        local rateHere = tThis.Confirmed != 0 ? tThis.Deaths / tThis.Confirmed : 0;

        local nNew = tThis.Confirmed;
        local nNewPrev = NULL;
        local nDoubling = NULL;
        if (i > 0)
            nNewPrev = tCountry[i-1].Confirmed;

        if (nNewPrev != NULL && nNewPrev > 0 && nNew > nNewPrev)
            nDoubling = kLog2 / log(nNew / nNewPrev);

        local sPopPerCase = formatPopPerCase(tCountryData.pop, nNew);

        local sDoubling = (nDoubling == NULL) ? "- " : format("%.1f", nDoubling);

        local nInferred = tRateKR != 0 ? tThis.Deaths / tRateKR : tThis.Deaths;

        if (rateHere <= tRateKR)
            {
            nInferred = NULL;
            }

        if (i < iHundred)
            nInferred = NULL;

        local sLine =
            format("| %s | %d | %s | %s | %s | %s | %.2f | %.2f | %s | %s |\n",
                    sDate,
                    i - iHundred,
                    formatHeadcount(tThis.Confirmed),
                    formatHeadcount(tThis.Deaths),
                    sPopPerCase,
                    sDoubling,
                    rateHere * 100,
                    tRateKR * 100,
                    formatHeadcount(nInferred),
                    formatPopPerCase(tCountryData.pop, nInferred)
                    );

        write(sLine);
        }
    }

function writeHeader()
    {
    write("# COVID-19 Report from `gen-covid-report`\n")
    write(
[[
- [Introduction](#introduction)
- [Korea, South Cases (Reported and Inferred)](#korea-south-cases-reported-and-inferred)
- [US Cases (Reported and Inferred)](#us-cases-reported-and-inferred)
- [Italy Cases (Reported and Inferred)](#italy-cases-reported-and-inferred)
- [Norway Cases (Reported and Inferred)](#norway-cases-reported-and-inferred)
- [Spain Cases (Reported and Inferred)](#spain-cases-reported-and-inferred)
- [France Cases (Reported and Inferred)](#france-cases-reported-and-inferred)
- [Germany Cases (Reported and Inferred)](#germany-cases-reported-and-inferred)
- [India Cases (Reported and Inferred)](#india-cases-reported-and-inferred)
- [Japan Cases (Reported and Inferred)](#japan-cases-reported-and-inferred)
- [Ecuador Cases (Reported and Inferred)](#ecuador-cases-reported-and-inferred)
- [Canada Cases (Reported and Inferred)](#canada-cases-reported-and-inferred)
- [Taiwan Cases (Reported and Inferred)](#taiwan-cases-reported-and-inferred)
- [World cases (outside China)](#world-cases-outside-china)

## Introduction

This report was generated from the Johns Hopkins COVID-19 data base, available on [GitHub](https://github.com/CSSEGISandData/COVID-19).

It consists of reports about a number of countries, followed by a slightly different report on world data.

The country data starts with data for South Korea, which is taken as reference for relating cases to death rate during a well-surveilled outbreak.

Other countries are then presented, with comparisons to South Korea where applicable.

The report columns and their meanings:

- **Date** is the date of the report.
- **Dn** is the index relative to day when cases reached 100 or more. Days before 100 cases were reached are taken as negative. Following a suggestion I found at ft.com, a case load of 100 cases is taken to indicate the onset of community transition.
- **Confirmed** is the number of confirmed cases from the JHU COVID-19 series.
- **Deaths** is the number of reported deaths from the JHU COVID-19 series.
- **Pop/Confirmed** is the number of people per case in that country. Lower numbers indicate higher case load. I use this because it's easier to relate to community populations in a subset of the population. It might also be nice to report log(cases/population), which I imagine is the way it's ordinarily reported.
- **Doubling** is the number of days between doubling. It's not smoothed at all. Delays in reporting data will occasionally perturb it.
- **Deaths (%)** is simply reported deaths over reported cases, times 100%.
- **KR Deaths (%)** is the reference death rate in Korea _on the same relative day of outbreak_.
- **Inferred Cases** is the calculated number of cases, in case the reported death rate is higher than the Korean rate on the same day of the outbreak. This number is based on dividing the reported number of deaths by the reference Korean death rate. It's only reported if the Korean death rate is lower than the country's death rate.
- **Inferred Pop/Confirmed** is simply the number of people per inferred case.

The program for generating this report can be found on GitHub at [github.com/terrillmoore/gen-covid-report](https://github.com/terrillmoore/gen-covid-report). Running it requires a copy of the author's dialect of Lua, called "bright". Binaries are in the repository; [file an issue](https://github.com/terrillmoore/gen-covid-report/issues) if you'd like to encourage publication of the tools used in this script, or feel free to convert to Python, Lua, or the scripting language of your choice.
]]);

    }